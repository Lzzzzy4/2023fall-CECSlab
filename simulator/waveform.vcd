$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 T! clk [0:0] $end
  $var wire  1 V! commit_wb [0:0] $end
  $var wire 32 X! inst [31:0] $end
  $var wire 32 W! pc_cur [31:0] $end
  $var wire  1 U! rstn [0:0] $end
  $var wire  1 Y! uncache_read_wb [0:0] $end
  $scope module CPU $end
   $var wire 32 [! D_CACHE_DEPTH [31:0] $end
   $var wire  1 ^ EX_LS_flush [0:0] $end
   $var wire  1 ^! EX_LS_stall [0:0] $end
   $var wire  1 ] ID_EX_flush [0:0] $end
   $var wire  1 ^! ID_EX_stall [0:0] $end
   $var wire  1 [ IF1_IF2_flush [0:0] $end
   $var wire  1 \ IF1_IF2_stall [0:0] $end
   $var wire  1 [ IF2_ID_flush [0:0] $end
   $var wire  1 \ IF2_ID_stall [0:0] $end
   $var wire 32 [! I_CACHE_DEPTH [31:0] $end
   $var wire  1 ^ LS_WB_flush [0:0] $end
   $var wire  1 ^! LS_WB_stall [0:0] $end
   $var wire 32 Z! PC_RESET_VALUE [31:0] $end
   $var wire  5 F alu_op_ex [4:0] $end
   $var wire  5 E alu_op_id [4:0] $end
   $var wire 32 > alu_result_ex [31:0] $end
   $var wire 32 ? alu_result_ls [31:0] $end
   $var wire 32 @ alu_result_wb [31:0] $end
   $var wire 32 : alu_rf_data1 [31:0] $end
   $var wire 32 ; alu_rf_data2 [31:0] $end
   $var wire 32 < alu_rs1 [31:0] $end
   $var wire  2 M alu_rs1_sel_ex [1:0] $end
   $var wire  2 L alu_rs1_sel_id [1:0] $end
   $var wire 32 = alu_rs2 [31:0] $end
   $var wire  2 O alu_rs2_sel_ex [1:0] $end
   $var wire  2 N alu_rs2_sel_id [1:0] $end
   $var wire  5 K br_type_ex [4:0] $end
   $var wire  5 J br_type_id [4:0] $end
   $var wire  1 T! clk [0:0] $end
   $var wire  1 a commit_ex [0:0] $end
   $var wire  1 ` commit_id [0:0] $end
   $var wire  1 U! commit_if1 [0:0] $end
   $var wire  1 _ commit_if2 [0:0] $end
   $var wire  1 b commit_ls [0:0] $end
   $var wire  1 V! commit_wb [0:0] $end
   $var wire 32 j csr_mcause_in [31:0] $end
   $var wire 32 h csr_mepc_out [31:0] $end
   $var wire 32 i csr_mtvec_out [31:0] $end
   $var wire 32 k csr_rdata_ex [31:0] $end
   $var wire 32 g csr_rdata_id [31:0] $end
   $var wire 32 n csr_wdata_ex [31:0] $end
   $var wire 32 o csr_wdata_ls [31:0] $end
   $var wire 32 e csr_wdata_wb [31:0] $end
   $var wire  1 l csr_we_ex [0:0] $end
   $var wire  1 c csr_we_id [0:0] $end
   $var wire  1 p csr_we_ls [0:0] $end
   $var wire  1 f csr_we_wb [0:0] $end
   $var wire 32 D dcache_rdata_ls [31:0] $end
   $var wire 32 8 forward1_data [31:0] $end
   $var wire  1 X forward1_en [0:0] $end
   $var wire 32 9 forward2_data [31:0] $end
   $var wire  1 Y forward2_en [0:0] $end
   $var wire 32 2 imm_ex [31:0] $end
   $var wire 32 1 imm_id [31:0] $end
   $var wire 32 X! inst [31:0] $end
   $var wire 32 , inst_ex [31:0] $end
   $var wire 32 + inst_id [31:0] $end
   $var wire 32 * inst_if2 [31:0] $end
   $var wire 32 - inst_ls [31:0] $end
   $var wire 32 . inst_wb [31:0] $end
   $var wire  1 Z jump [0:0] $end
   $var wire 32 A jump_target [31:0] $end
   $var wire  5 H mem_access_ex [4:0] $end
   $var wire  5 G mem_access_id [4:0] $end
   $var wire  5 I mem_access_ls [4:0] $end
   $var wire 32 B mem_rdata_ls [31:0] $end
   $var wire 32 C mem_rdata_wb [31:0] $end
   $var wire 32 \! mem_wdata_ex [31:0] $end
   $var wire 32 0 next_pc [31:0] $end
   $var wire 32 W! pc_cur [31:0] $end
   $var wire 32 ' pc_ex [31:0] $end
   $var wire 32 & pc_id [31:0] $end
   $var wire 32 $ pc_if1 [31:0] $end
   $var wire 32 % pc_if2 [31:0] $end
   $var wire 32 ( pc_ls [31:0] $end
   $var wire  1 [ pc_set [0:0] $end
   $var wire  1 \ pc_stall [0:0] $end
   $var wire 32 / pc_target [31:0] $end
   $var wire 32 ) pc_wb [31:0] $end
   $var wire  5 m priv_vec_ex [4:0] $end
   $var wire  5 d priv_vec_id [4:0] $end
   $var wire  5 q priv_vec_ls [4:0] $end
   $var wire  5 r priv_vec_wb [4:0] $end
   $var wire 32 5 rf_rdata1_ex [31:0] $end
   $var wire 32 4 rf_rdata1_id [31:0] $end
   $var wire 32 7 rf_rdata2_ex [31:0] $end
   $var wire 32 6 rf_rdata2_id [31:0] $end
   $var wire 32 3 rf_wdata_wb [31:0] $end
   $var wire  1 U rf_we_ex [0:0] $end
   $var wire  1 T rf_we_id [0:0] $end
   $var wire  1 V rf_we_ls [0:0] $end
   $var wire  1 W rf_we_wb [0:0] $end
   $var wire  1 U! rstn [0:0] $end
   $var wire  1 Y! uncache_read_wb [0:0] $end
   $var wire  1 Q wb_rf_sel_ex [0:0] $end
   $var wire  1 P wb_rf_sel_id [0:0] $end
   $var wire  1 R wb_rf_sel_ls [0:0] $end
   $var wire  1 S wb_rf_sel_wb [0:0] $end
   $var wire  4 ]! wstrb_ex [3:0] $end
   $scope module ALU_inst $end
    $var wire  5 F alu_op [4:0] $end
    $var wire 32 > result [31:0] $end
    $var wire 64 s result_64 [63:0] $end
    $var wire 32 u result_div [31:0] $end
    $var wire 32 v result_rem [31:0] $end
    $var wire  2 w sign [1:0] $end
    $var wire 32 < sr1 [31:0] $end
    $var wire 32 x sr1_abs [31:0] $end
    $var wire 32 = sr2 [31:0] $end
    $var wire 32 y sr2_abs [31:0] $end
   $upscope $end
   $scope module ALU_rf_data1_mux $end
    $var wire 32 _! WIDTH [31:0] $end
    $var wire 32 5 din1 [31:0] $end
    $var wire 32 8 din2 [31:0] $end
    $var wire 32 : dout [31:0] $end
    $var wire  1 X sel [0:0] $end
   $upscope $end
   $scope module ALU_rf_data2_mux $end
    $var wire 32 _! WIDTH [31:0] $end
    $var wire 32 7 din1 [31:0] $end
    $var wire 32 9 din2 [31:0] $end
    $var wire 32 ; dout [31:0] $end
    $var wire  1 Y sel [0:0] $end
   $upscope $end
   $scope module ALU_rs1_mux $end
    $var wire 32 _! WIDTH [31:0] $end
    $var wire 32 : din1 [31:0] $end
    $var wire 32 ' din2 [31:0] $end
    $var wire 32 `! din3 [31:0] $end
    $var wire 32 `! din4 [31:0] $end
    $var wire 32 < dout [31:0] $end
    $var wire  2 M sel [1:0] $end
   $upscope $end
   $scope module ALU_rs2_mux $end
    $var wire 32 _! WIDTH [31:0] $end
    $var wire 32 ; din1 [31:0] $end
    $var wire 32 2 din2 [31:0] $end
    $var wire 32 a! din3 [31:0] $end
    $var wire 32 k din4 [31:0] $end
    $var wire 32 = dout [31:0] $end
    $var wire  2 O sel [1:0] $end
   $upscope $end
   $scope module Branch_inst $end
    $var wire  5 K br_type [4:0] $end
    $var wire 32 2 imm [31:0] $end
    $var wire  1 z is_branch $end
    $var wire  1 { is_jal $end
    $var wire  1 | is_jalr $end
    $var wire  1 Z jump [0:0] $end
    $var wire 32 A jump_target [31:0] $end
    $var wire 32 ' pc [31:0] $end
    $var wire 32 : sr1 [31:0] $end
    $var wire 32 ; sr2 [31:0] $end
   $upscope $end
   $scope module CSR_inst $end
    $var wire  1 T! clk [0:0] $end
    $var wire 32 "! mcause [31:0] $end
    $var wire 32 j mcause_in [31:0] $end
    $var wire 32 h mepc [31:0] $end
    $var wire 32 h mepc_out [31:0] $end
    $var wire 32 !! mstatus [31:0] $end
    $var wire 32 i mtvec [31:0] $end
    $var wire 32 i mtvec_out [31:0] $end
    $var wire 32 ) pc_wb [31:0] $end
    $var wire  5 r priv_vec_wb [4:0] $end
    $var wire 12 } raddr [11:0] $end
    $var wire 32 g rdata [31:0] $end
    $var wire  1 U! rstn [0:0] $end
    $var wire 12 ~ waddr [11:0] $end
    $var wire 32 e wdata [31:0] $end
    $var wire  1 f we [0:0] $end
    $var wire 32 b! zero [31:0] $end
   $upscope $end
   $scope module DCache_Read_Ctrl_inst $end
    $var wire  1 #! is_load $end
    $var wire 32 D load_data [31:0] $end
    $var wire  3 $! load_type [2:0] $end
    $var wire  5 I mem_access [4:0] $end
    $var wire 32 ? mem_raddr [31:0] $end
    $var wire 32 D mem_rdata [31:0] $end
    $var wire 32 B rdata [31:0] $end
   $upscope $end
   $scope module DCache_inst $end
    $var wire 32 [! DEPTH [31:0] $end
    $var wire  1 T! clk [0:0] $end
    $var wire  1 ^ flush [0:0] $end
    $var wire  5 H mem_access [4:0] $end
    $var wire 32 > raddr [31:0] $end
    $var wire 32 D rdata [31:0] $end
    $var wire 32 %! rdata_temp [31:0] $end
    $var wire  1 ^! stall [0:0] $end
    $var wire 32 > waddr [31:0] $end
    $var wire 32 ; wdata [31:0] $end
   $upscope $end
   $scope module Decode_inst $end
    $var wire  5 E alu_op [4:0] $end
    $var wire  2 L alu_rs1_sel [1:0] $end
    $var wire  2 N alu_rs2_sel [1:0] $end
    $var wire  5 J br_type [4:0] $end
    $var wire  1 c csr_we [0:0] $end
    $var wire  3 '! funct3 [2:0] $end
    $var wire 32 1 imm [31:0] $end
    $var wire 32 + inst [31:0] $end
    $var wire  5 G mem_access [4:0] $end
    $var wire  5 d priv_vec [4:0] $end
    $var wire  5 &! rd [4:0] $end
    $var wire  1 T rf_we [0:0] $end
    $var wire  1 P wb_rf_sel [0:0] $end
   $upscope $end
   $scope module Hazard_inst $end
    $var wire  1 ^ EX_LS_flush [0:0] $end
    $var wire  1 ^! EX_LS_stall [0:0] $end
    $var wire  1 ] ID_EX_flush [0:0] $end
    $var wire  1 ^! ID_EX_stall [0:0] $end
    $var wire  1 [ IF1_IF2_flush [0:0] $end
    $var wire  1 \ IF1_IF2_stall [0:0] $end
    $var wire  1 [ IF2_ID_flush [0:0] $end
    $var wire  1 \ IF2_ID_stall [0:0] $end
    $var wire  1 ^ LS_WB_flush [0:0] $end
    $var wire  1 ^! LS_WB_stall [0:0] $end
    $var wire  1 ^ flush_by_ecall_wb $end
    $var wire  1 ^ flush_by_exp $end
    $var wire  1 Z flush_by_jump $end
    $var wire  1 /! flush_by_load_use $end
    $var wire  1 1! flush_by_priv_ex $end
    $var wire 32 8 forward1_data [31:0] $end
    $var wire  1 X forward1_en [0:0] $end
    $var wire 32 9 forward2_data [31:0] $end
    $var wire  1 Y forward2_en [0:0] $end
    $var wire  1 0! is_load_ex $end
    $var wire  1 Z jump [0:0] $end
    $var wire 32 A jump_target [31:0] $end
    $var wire 32 j mcause [31:0] $end
    $var wire  5 H mem_access_ex [4:0] $end
    $var wire 32 h mepc [31:0] $end
    $var wire 32 i mtvec [31:0] $end
    $var wire 32 ' pc_ex [31:0] $end
    $var wire  1 [ pc_set [0:0] $end
    $var wire 32 / pc_set_target [31:0] $end
    $var wire  1 \ pc_stall [0:0] $end
    $var wire 32 ) pc_wb [31:0] $end
    $var wire  5 m priv_vec_ex [4:0] $end
    $var wire  5 r priv_vec_wb [4:0] $end
    $var wire  5 ,! rf_rd_ex [4:0] $end
    $var wire  5 (! rf_rd_ls [4:0] $end
    $var wire  5 )! rf_rd_wb [4:0] $end
    $var wire  5 *! rf_rs1_ex [4:0] $end
    $var wire  5 -! rf_rs1_id [4:0] $end
    $var wire  5 +! rf_rs2_ex [4:0] $end
    $var wire  5 .! rf_rs2_id [4:0] $end
    $var wire 32 ? rf_wdata_tmp_ls [31:0] $end
    $var wire 32 3 rf_wdata_wb [31:0] $end
    $var wire  1 V rf_we_ls [0:0] $end
    $var wire  1 W rf_we_wb [0:0] $end
    $var wire  1 \ stall_by_load_use $end
   $upscope $end
   $scope module ICache_inst $end
    $var wire 32 [! DEPTH [31:0] $end
    $var wire  1 T! clk [0:0] $end
    $var wire  1 [ flush [0:0] $end
    $var wire 32 $ raddr [31:0] $end
    $var wire 32 * rdata [31:0] $end
    $var wire 32 2! rdata_temp [31:0] $end
    $var wire  1 \ stall [0:0] $end
   $upscope $end
   $scope module NPC_Mux_inst $end
    $var wire 32 0 next_pc [31:0] $end
    $var wire 32 $ pc [31:0] $end
    $var wire  1 [ pc_set [0:0] $end
    $var wire 32 / pc_target [31:0] $end
   $upscope $end
   $scope module PC_inst $end
    $var wire 32 Z! RESET_VALUE [31:0] $end
    $var wire  1 T! clk [0:0] $end
    $var wire 32 0 next_pc [31:0] $end
    $var wire 32 $ pc [31:0] $end
    $var wire 32 $ pc_reg [31:0] $end
    $var wire  1 U! rstn [0:0] $end
    $var wire  1 \ stall [0:0] $end
   $upscope $end
   $scope module Priv_inst $end
    $var wire  3 e! CSRRC [2:0] $end
    $var wire  3 h! CSRRCI [2:0] $end
    $var wire  3 d! CSRRS [2:0] $end
    $var wire  3 g! CSRRSI [2:0] $end
    $var wire  3 c! CSRRW [2:0] $end
    $var wire  3 f! CSRRWI [2:0] $end
    $var wire  3 3! csr_op [2:0] $end
    $var wire 32 k csr_rdata [31:0] $end
    $var wire 32 n csr_wdata [31:0] $end
    $var wire 32 : rf_rdata1 [31:0] $end
    $var wire 32 2 zimm [31:0] $end
   $upscope $end
   $scope module Regfile_inst $end
    $var wire  1 T! clk [0:0] $end
    $var wire  5 -! raddr1 [4:0] $end
    $var wire  5 .! raddr2 [4:0] $end
    $var wire 32 4 rdata1 [31:0] $end
    $var wire 32 6 rdata2 [31:0] $end
    $var wire 32 4! rf[0] [31:0] $end
    $var wire 32 >! rf[10] [31:0] $end
    $var wire 32 ?! rf[11] [31:0] $end
    $var wire 32 @! rf[12] [31:0] $end
    $var wire 32 A! rf[13] [31:0] $end
    $var wire 32 B! rf[14] [31:0] $end
    $var wire 32 C! rf[15] [31:0] $end
    $var wire 32 D! rf[16] [31:0] $end
    $var wire 32 E! rf[17] [31:0] $end
    $var wire 32 F! rf[18] [31:0] $end
    $var wire 32 G! rf[19] [31:0] $end
    $var wire 32 5! rf[1] [31:0] $end
    $var wire 32 H! rf[20] [31:0] $end
    $var wire 32 I! rf[21] [31:0] $end
    $var wire 32 J! rf[22] [31:0] $end
    $var wire 32 K! rf[23] [31:0] $end
    $var wire 32 L! rf[24] [31:0] $end
    $var wire 32 M! rf[25] [31:0] $end
    $var wire 32 N! rf[26] [31:0] $end
    $var wire 32 O! rf[27] [31:0] $end
    $var wire 32 P! rf[28] [31:0] $end
    $var wire 32 Q! rf[29] [31:0] $end
    $var wire 32 6! rf[2] [31:0] $end
    $var wire 32 R! rf[30] [31:0] $end
    $var wire 32 S! rf[31] [31:0] $end
    $var wire 32 7! rf[3] [31:0] $end
    $var wire 32 8! rf[4] [31:0] $end
    $var wire 32 9! rf[5] [31:0] $end
    $var wire 32 :! rf[6] [31:0] $end
    $var wire 32 ;! rf[7] [31:0] $end
    $var wire 32 <! rf[8] [31:0] $end
    $var wire 32 =! rf[9] [31:0] $end
    $var wire  5 )! waddr [4:0] $end
    $var wire 32 3 wdata [31:0] $end
    $var wire  1 W we $end
    $scope module unnamedblk1 $end
     $var wire 32 # i [31:0] $end
    $upscope $end
   $upscope $end
   $scope module SegReg_EX_LS_inst $end
    $var wire 32 Z! PC_RESET_VAL [31:0] $end
    $var wire 32 > alu_result_ex [31:0] $end
    $var wire 32 ? alu_result_ls [31:0] $end
    $var wire  1 T! clk [0:0] $end
    $var wire  1 a commit_ex [0:0] $end
    $var wire  1 b commit_ls [0:0] $end
    $var wire 32 n csr_wdata_ex [31:0] $end
    $var wire 32 o csr_wdata_ls [31:0] $end
    $var wire  1 l csr_we_ex [0:0] $end
    $var wire  1 p csr_we_ls [0:0] $end
    $var wire  1 ^ flush [0:0] $end
    $var wire 32 , inst_ex [31:0] $end
    $var wire 32 - inst_ls [31:0] $end
    $var wire  5 H mem_access_ex [4:0] $end
    $var wire  5 I mem_access_ls [4:0] $end
    $var wire 32 ' pc_ex [31:0] $end
    $var wire 32 ( pc_ls [31:0] $end
    $var wire  5 m priv_vec_ex [4:0] $end
    $var wire  5 q priv_vec_ls [4:0] $end
    $var wire  1 U rf_we_ex [0:0] $end
    $var wire  1 V rf_we_ls [0:0] $end
    $var wire  1 U! rstn [0:0] $end
    $var wire  1 ^! stall [0:0] $end
    $var wire  1 Q wb_rf_sel_ex [0:0] $end
    $var wire  1 R wb_rf_sel_ls [0:0] $end
   $upscope $end
   $scope module SegReg_ID_EX_inst $end
    $var wire 32 Z! PC_RESET_VAL [31:0] $end
    $var wire  2 M alu_rs1_sel_ex [1:0] $end
    $var wire  2 L alu_rs1_sel_id [1:0] $end
    $var wire  2 O alu_rs2_sel_ex [1:0] $end
    $var wire  2 N alu_rs2_sel_id [1:0] $end
    $var wire  5 K br_type_ex [4:0] $end
    $var wire  5 J br_type_id [4:0] $end
    $var wire  1 T! clk [0:0] $end
    $var wire  1 a commit_ex [0:0] $end
    $var wire  1 ` commit_id [0:0] $end
    $var wire 32 k csr_rdata_ex [31:0] $end
    $var wire 32 g csr_rdata_id [31:0] $end
    $var wire  1 l csr_we_ex [0:0] $end
    $var wire  1 c csr_we_id [0:0] $end
    $var wire  1 ] flush [0:0] $end
    $var wire 32 2 imm_ex [31:0] $end
    $var wire 32 1 imm_id [31:0] $end
    $var wire 32 , inst_ex [31:0] $end
    $var wire 32 + inst_id [31:0] $end
    $var wire  5 H mem_access_ex [4:0] $end
    $var wire  5 G mem_access_id [4:0] $end
    $var wire  5 F op_ex [4:0] $end
    $var wire  5 E op_id [4:0] $end
    $var wire 32 ' pc_ex [31:0] $end
    $var wire 32 & pc_id [31:0] $end
    $var wire  5 m priv_vec_ex [4:0] $end
    $var wire  5 d priv_vec_id [4:0] $end
    $var wire 32 5 rdata1_ex [31:0] $end
    $var wire 32 4 rdata1_id [31:0] $end
    $var wire 32 7 rdata2_ex [31:0] $end
    $var wire 32 6 rdata2_id [31:0] $end
    $var wire  1 U rf_we_ex [0:0] $end
    $var wire  1 T rf_we_id [0:0] $end
    $var wire  1 U! rstn [0:0] $end
    $var wire  1 ^! stall [0:0] $end
    $var wire  1 Q wb_rf_sel_ex [0:0] $end
    $var wire  1 P wb_rf_sel_id [0:0] $end
   $upscope $end
   $scope module SegReg_IF1_IF2_inst $end
    $var wire 32 Z! PC_RESET_VAL [31:0] $end
    $var wire  1 T! clk [0:0] $end
    $var wire  1 U! commit_if1 [0:0] $end
    $var wire  1 _ commit_if2 [0:0] $end
    $var wire  1 [ flush [0:0] $end
    $var wire 32 $ pc_if1 [31:0] $end
    $var wire 32 % pc_if2 [31:0] $end
    $var wire  1 U! rstn [0:0] $end
    $var wire  1 \ stall [0:0] $end
   $upscope $end
   $scope module SegReg_IF2_ID_inst $end
    $var wire 32 Z! PC_RESET_VAL [31:0] $end
    $var wire  1 T! clk [0:0] $end
    $var wire  1 ` commit_id [0:0] $end
    $var wire  1 _ commit_if2 [0:0] $end
    $var wire  1 [ flush [0:0] $end
    $var wire 32 + inst_id [31:0] $end
    $var wire 32 * inst_if2 [31:0] $end
    $var wire 32 & pc_id [31:0] $end
    $var wire 32 % pc_if2 [31:0] $end
    $var wire  1 U! rstn [0:0] $end
    $var wire  1 \ stall [0:0] $end
   $upscope $end
   $scope module SegReg_LS_WB_inst $end
    $var wire 32 Z! PC_RESET_VAL [31:0] $end
    $var wire 32 ? alu_result_ls [31:0] $end
    $var wire 32 @ alu_result_wb [31:0] $end
    $var wire  1 T! clk [0:0] $end
    $var wire  1 b commit_ls [0:0] $end
    $var wire  1 V! commit_wb [0:0] $end
    $var wire 32 o csr_wdata_ls [31:0] $end
    $var wire 32 e csr_wdata_wb [31:0] $end
    $var wire  1 p csr_we_ls [0:0] $end
    $var wire  1 f csr_we_wb [0:0] $end
    $var wire  1 ^ flush [0:0] $end
    $var wire 32 - inst_ls [31:0] $end
    $var wire 32 . inst_wb [31:0] $end
    $var wire 32 B mem_rdata_ls [31:0] $end
    $var wire 32 C mem_rdata_wb [31:0] $end
    $var wire 32 ( pc_ls [31:0] $end
    $var wire 32 ) pc_wb [31:0] $end
    $var wire  5 q priv_vec_ls [4:0] $end
    $var wire  5 r priv_vec_wb [4:0] $end
    $var wire  1 #! read_ls [0:0] $end
    $var wire  1 V rf_we_ls [0:0] $end
    $var wire  1 W rf_we_wb [0:0] $end
    $var wire  1 U! rstn [0:0] $end
    $var wire  1 ^! stall [0:0] $end
    $var wire  1 Y! uncache_read_wb [0:0] $end
    $var wire  1 R wb_rf_sel_ls [0:0] $end
    $var wire  1 S wb_rf_sel_wb [0:0] $end
   $upscope $end
   $scope module WB_rf_wdata_mux $end
    $var wire 32 _! WIDTH [31:0] $end
    $var wire 32 @ din1 [31:0] $end
    $var wire 32 C din2 [31:0] $end
    $var wire 32 3 dout [31:0] $end
    $var wire  1 S sel [0:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


